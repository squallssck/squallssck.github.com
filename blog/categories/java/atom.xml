<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JAVA | Techfee]]></title>
  <link href="http://squallssck.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://squallssck.github.com/"/>
  <updated>2013-03-08T00:44:23-05:00</updated>
  <id>http://squallssck.github.com/</id>
  <author>
    <name><![CDATA[squallssck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About how to embed image into one single html]]></title>
    <link href="http://squallssck.github.com/blog/2013/02/27/about-how-to-embed-image-into-one-single-html/"/>
    <updated>2013-02-27T13:48:00-05:00</updated>
    <id>http://squallssck.github.com/blog/2013/02/27/about-how-to-embed-image-into-one-single-html</id>
    <content type="html"><![CDATA[<p>```java</p>

<p>private static String embed(File htmlFile) {</p>

<pre><code>    String final_return = "error";

    try {

        BufferedReader br = new BufferedReader(new FileReader(htmlFile));

        StringBuilder sb = new StringBuilder();

        String line = "";

        while ((line = br.readLine()) != null) {
            sb.append(line);
        }

        // System.out.println(sb.toString());

        br.close();

        String htmlContent = sb.toString();

        org.jsoup.nodes.Document doc = Jsoup.parse(htmlContent);

        Elements images = doc.getElementsByTag("img");

        for (Element image : images) {

            String imgName = image.attr("src");

            // System.out.println(imgName);

            // we surppose image files are in the same folder with the html file.
            File tempImageFile = new File(file.getParentFile().getAbsoluteFile()+"/"+ imgName);

            if (tempImageFile.exists() &amp;&amp; imgName.trim() != "") {

                // System.out.println(tempImageFile);

                String imageString = new String(

                Base64.encodeBase64(FileUtils.readFileToByteArray(tempImageFile))

                );

                // System.out.println(imageString);

                image.attr("src", "data:image;base64," + imageString);

                // tempImageFile.deleteOnExit();
            }

            else {

                // System.out.println("in else;;;");
                image.attr("src", "data:image;base64," + "");

            }

        }

        final_return = doc.toString();

    } catch (Exception e) {

        //do stuff...
    }

    return final_return;

}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Core Series 2: About Java Socket]]></title>
    <link href="http://squallssck.github.com/blog/2013/02/27/about-java-socket/"/>
    <updated>2013-02-27T00:48:00-05:00</updated>
    <id>http://squallssck.github.com/blog/2013/02/27/about-java-socket</id>
    <content type="html"><![CDATA[<p>COMMING SOON ...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Core Series 1: About Java IO]]></title>
    <link href="http://squallssck.github.com/blog/2013/02/27/about-java-io/"/>
    <updated>2013-02-27T00:39:00-05:00</updated>
    <id>http://squallssck.github.com/blog/2013/02/27/about-java-io</id>
    <content type="html"><![CDATA[<p>COMMING SOON ...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About how to get mime types using Java]]></title>
    <link href="http://squallssck.github.com/blog/2013/02/26/about-how-to-get-mime-types-using-java/"/>
    <updated>2013-02-26T13:14:00-05:00</updated>
    <id>http://squallssck.github.com/blog/2013/02/26/about-how-to-get-mime-types-using-java</id>
    <content type="html"><![CDATA[<p><em>1. using javax.activation.MimetypesFileTypeMap</em></p>

<p><code>java
 File f = new File("test.docx");
 String mimeType = new MimetypesFileTypeMap().getContentType(f);
</code></p>

<p><code>
result:
Mime Type of .DS_Store is application/octet-stream
Mime Type of 444.docx is application/octet-stream
Mime Type of f.jar is application/octet-stream
Mime Type of Non-Disclosure Agreement.docx is application/octet-stream
Mime Type of W9 Form.pddf is application/octet-stream
</code></p>

<p><em>2. Write yourself</em></p>

<!--more-->


<p>```java</p>

<pre><code>private static final int PREFIX_COUNT = 20;

// PDF tag
private static final String PDF_TAG = "25 50 44 46";
// Microsoft
private static final String DOC1_TAG = "D0 CF 11 E0 A1 B1 1A E1";
// Word Document
private static final String DOC2_TAG = "EC A5 C1 00";
// Perfect Office Document
private static final String DOC3_TAG = "CF 11 E0 A1 B1 1A E1 00";
// Deskmate
private static final String DOC4_TAG = "0D 44 4F 43";
// DOCX
private static final String DOCX_TAG = "50 4B 3 4 14 0 6 0";
// RTF
private static final String RTF_TAG = "7B 5C 72 74 66 31";

public static string getMimeType(String filePath) {

    String rawFileName = filePath;

    File raw_file = new File(rawFileName);

    byte[] raw_result = new byte[PREFIX_COUNT];

    try {
        InputStream raw_input = null;
        try {

            raw_input = new BufferedInputStream(new FileInputStream(raw_file));

            raw_input.read(raw_result, 0, PREFIX_COUNT);

        } finally {

            raw_input.close();
        }
    } catch (FileNotFoundException ex) {
    }

    catch (IOException ex) {

        e.printStackTrace();

    }

    StringBuffer byteTemp = new StringBuffer("");

    for (int j = 0; j &lt; PREFIX_COUNT; j++) {

        String temp = Integer.toHexString(raw_result[j]);

        if (temp.length() &gt; 2) {
            byteTemp.append(temp.substring(temp.length() - 2));
        } else {
            byteTemp.append(temp);
        }

        byteTemp.append(" ");

    }

    int doctype = findDocType(byteTemp.toString().toUpperCase());

    switch (doctype) {

    case 1:
        return "filetype:doc";

    case 2:
        return "filetype:docx";

    case 3:
        return "filetype:rtf";

    default:
        return "filetype:unknow";

    }

}

private static int findDocType(String prefix) {

    // System.out.println(prefix);

    if (prefix.startsWith(DOCX_TAG)) {
        return 2;
    }
    if (prefix.startsWith(DOC1_TAG)) {
        return 1;
    }
    if (prefix.startsWith(RTF_TAG)) {
        return 3;
    }

    return 0;

}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About how to convert docx/doc/rtf into html using JAVA]]></title>
    <link href="http://squallssck.github.com/blog/2013/02/25/about-how-to-convert-docx-slash-doc-slash-rtf-into-html-using-java/"/>
    <updated>2013-02-25T12:06:00-05:00</updated>
    <id>http://squallssck.github.com/blog/2013/02/25/about-how-to-convert-docx-slash-doc-slash-rtf-into-html-using-java</id>
    <content type="html"><![CDATA[<p>Actually, there is one solution, "One sulution to rule them all" . That is to use OpenOffice as the background service to convert them all. You can implement this remote call by yourself, but someone already wrote a java library to provide a high level API for us to use called JODConverter.</p>

<p>http://code.google.com/p/jodconverter/</p>

<p>```java</p>

<pre><code>    OfficeManager officeManager = new DefaultOfficeManagerConfiguration()
        //2 ports indicate 2 working processes to do the conversion.
        .setPortNumbers(8100, 8101)
        //restart openoffice working process after every 30 conversions to prevent memory leak of the working process. (unsolved issue of openoffice)
        .setMaxTasksPerProcess(30)
        //untouched tasks in the queue that over 1200000ms will be discarded.(get a officeManager not found exception)
        .setTaskQueueTimeout(1200000)
        //if one task processing time over 20000ms, it will throw an exception.
        .setTaskExecutionTimeout(20000)
        .buildOfficeManager();

    officeManager.start();
    OfficeDocumentConverter converter = new OfficeDocumentConverter(officeManager);
    converter.convert(new File(filepath1), new File(filepath2));

    officeManager.stop();
</code></pre>

<p>```</p>

<!--more-->


<p> On Mac, install OpenOffice is very easy by install a dmg file. But on linux server, it's better to use libreoffice instead. Libreoffice is now actively updated by The Document Foundation.</p>

<p> Why LibreOffice over (Apache) OpenOffice because (1) It has a better open source license. (2) It has more community support. (3) It is more rapidly developing and releasing updates</p>

<blockquote><p>Before installing LibreOffice you need to remove existing openoffice from your system using the following command
```
sudo apt-get purge openoffice<em>.</em></p></blockquote>

<p>sudo add-apt-repository ppa:libreoffice/ppa
sudo apt-get update
sudo apt-get install libreoffice
```</p>

<blockquote><p>And it's better to use singleton mode to use the officeManager.</p></blockquote>
]]></content>
  </entry>
  
</feed>
