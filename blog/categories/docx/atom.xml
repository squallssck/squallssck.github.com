<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DOCX | KC's Core Java World]]></title>
  <link href="http://squallssck.github.com/blog/categories/docx/atom.xml" rel="self"/>
  <link href="http://squallssck.github.com/"/>
  <updated>2013-02-27T00:52:03-05:00</updated>
  <id>http://squallssck.github.com/</id>
  <author>
    <name><![CDATA[squallssck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About how to convert docx/doc/rtf into html using JAVA]]></title>
    <link href="http://squallssck.github.com/blog/2013/02/25/about-how-to-convert-docx-slash-doc-slash-rtf-into-html-using-java/"/>
    <updated>2013-02-25T12:06:00-05:00</updated>
    <id>http://squallssck.github.com/blog/2013/02/25/about-how-to-convert-docx-slash-doc-slash-rtf-into-html-using-java</id>
    <content type="html"><![CDATA[<p>Actually, there is one solution, "One sulution to rule them all" . That is to use OpenOffice as the background service to convert them all. You can implement this remote call by yourself, but someone already wrote a java library to provide a high level API for us to use called JODConverter.</p>

<p>http://code.google.com/p/jodconverter/</p>

<p>```java</p>

<pre><code>    OfficeManager officeManager = new DefaultOfficeManagerConfiguration()
        //2 ports indicate 2 working processes to do the conversion.
        .setPortNumbers(8100, 8101)
        //restart openoffice working process after every 30 conversions to prevent memory leak of the working process. (unsolved issue of openoffice)
        .setMaxTasksPerProcess(30)
        //untouched tasks in the queue that over 1200000ms will be discarded.(get a officeManager not found exception)
        .setTaskQueueTimeout(1200000)
        //if one task processing time over 20000ms, it will throw an exception.
        .setTaskExecutionTimeout(20000)
        .buildOfficeManager();

    officeManager.start();
    OfficeDocumentConverter converter = new OfficeDocumentConverter(officeManager);
    converter.convert(new File(filepath1), new File(filepath2));

    officeManager.stop();
</code></pre>

<p>```</p>

<!--more-->


<p> On Mac, install OpenOffice is very easy by install a dmg file. But on linux server, it's better to use libreoffice instead. Libreoffice is now actively updated by The Document Foundation.</p>

<p> Why LibreOffice over (Apache) OpenOffice because (1) It has a better open source license. (2) It has more community support. (3) It is more rapidly developing and releasing updates</p>

<blockquote><p>Before installing LibreOffice you need to remove existing openoffice from your system using the following command
```
sudo apt-get purge openoffice<em>.</em></p></blockquote>

<p>sudo add-apt-repository ppa:libreoffice/ppa
sudo apt-get update
sudo apt-get install libreoffice
```</p>

<blockquote><p>And it's better to use singleton mode to use the officeManager.</p></blockquote>
]]></content>
  </entry>
  
</feed>
